pipeline {
  agent none
  stages {
    stage('BuildAndTest') {
      matrix {
        agent any
        axes {
          axis {
            name 'TOX_ENV'
            values 'py36', 'py37', 'py38', 'lint', 'manifest'
          }
        }
        environment {
          PANO_CLIENT_ID = 'test-client-id'
          PANO_CLIENT_SECRET = 'test-client-secret'
        }
        stages {
          stage('RunTox') {
            steps {
              script {
                def images = [py36: 'python:3.6', py37: 'python:3.7', py38: 'python:3.8']
                def image = images.get(TOX_ENV, 'python:3.7')
                withCredentials([file(credentialsId: 'ARTIFACTORY_PIPCONF', variable: 'PIPCONF_PATH')]) {
                  docker.image(image).inside('-v ${PIPCONF_PATH}:/etc/pip.conf -e PANO_CLIENT_ID -e PANO_CLIENT_SECRET') {
                    sh "pip install --upgrade tox && tox -r -e ${TOX_ENV}"
                  }
                }
              }
            }
          }
        }
      }
    }
    stage('Package') {
      when {
        tag 'v*'
        beforeAgent true
      }
      agent {
        docker {
          image 'python:3.7'
        }
      }
      environment {
        VERSION = sh(script: 'python setup.py --version', returnStdout: true).trim()
      }
      steps {
        withCredentials([file(credentialsId: 'ARTIFACTORY_PIPCONF', variable: 'PIPCONF_PATH')]) {
          sh 'python setup.py sdist bdist_wheel'
        }
        rtUpload(
          serverId: 'pano',
          spec: '''{
            "files": [
              {
                "pattern": "dist/*",
                "target": "pypi/pano-cli/${VERSION}/",
                "props": "pypi.name=pano-cli;pypi.normalized.name=pano-cli;pypi.requires.python=>=3.6;pypi.version=${VERSION}"
              }
            ]
          }''',
          failNoOp: true,
        )
      }
      post {
        success {
          archiveArtifacts 'dist/*'
        }
      }
    }
    stage('Apply') {
      when {
        tag 'v*'
        beforeAgent true
      }
      agent {
        docker {
          image 'amazon/aws-cli:2.0.27'
          args '--entrypoint=""'
        }
      }
      steps {
        withCredentials([
          [
            $class: 'AmazonWebServicesCredentialsBinding',
            credentialsId: 'AWS_ASSETS_ECR',
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]
        ]) {
	      sh script: 'python shipping/generate-versions-file.py', label: "Generate versions file"
	      sh script: 'aws s3 cp versions.json s3://a1.panocdn.com/updates/pano-cli/versions.json --metadata-directive REPLACE --cache-control max-age=60', label: "Update versions file in S3"
        }
      }
    }
  }
}
